# -*- coding: utf-8 -*-
"""Fuzzy-c-means

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hWpZRWg6-SY1bPZ1HOgLsv2l3WJM3b20
"""

!pip install fuzzy-c-means

from fcmeans import FCM

!pip install --force-reinstall fuzzy-c-means

!pip install --force-reinstall numpy
!pip install --force-reinstall pandas

import pandas as pd
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import KBinsDiscretizer
from scipy import stats
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

data = pd.read_csv("/content/IRIS (2).csv")

features = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
X = data[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

k_values = range(2, 10)  # Test k values from 2 to 9
silhouette_scores = []
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    score = silhouette_score(X_scaled, kmeans.labels_)
    silhouette_scores.append(score)

optimal_k = k_values[silhouette_scores.index(max(silhouette_scores))]
print(f"Optimal number of clusters (based on silhouette score for KMeans): {optimal_k}")

fcm = FCM(n_clusters=optimal_k) # Using the same optimal k found for KMeans
fcm.fit(X_scaled)

data['cluster_fcm'] = fcm.predict(X_scaled)

plt.figure(figsize=(8, 6))
for cluster in range(optimal_k):
  cluster_data = data[data['cluster_fcm'] == cluster]
  plt.scatter(cluster_data['sepal_length'], cluster_data['sepal_width'], label=f'Cluster {cluster}')
plt.scatter(fcm.centers[:, 0], fcm.centers[:, 1], s=200, c='red', marker='*', label='Centroids')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.title('Fuzzy C-Means Clustering')
plt.legend()
plt.show()